/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.symfonia.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import wtx.symfonia.api.client.invoker.JSON;

/**
 * SaleDocumentListElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SaleDocumentListElement {
  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "DocumentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  @javax.annotation.Nullable
  private String documentNumber;

  public static final String SERIALIZED_NAME_NET_VALUE_P_L_N = "NetValuePLN";
  @SerializedName(SERIALIZED_NAME_NET_VALUE_P_L_N)
  @javax.annotation.Nullable
  private Double netValuePLN;

  public static final String SERIALIZED_NAME_VAT_VALUE_P_L_N = "VatValuePLN";
  @SerializedName(SERIALIZED_NAME_VAT_VALUE_P_L_N)
  @javax.annotation.Nullable
  private Double vatValuePLN;

  public static final String SERIALIZED_NAME_NET_VALUE = "NetValue";
  @SerializedName(SERIALIZED_NAME_NET_VALUE)
  @javax.annotation.Nullable
  private Double netValue;

  public static final String SERIALIZED_NAME_GROSS_VALUE = "GrossValue";
  @SerializedName(SERIALIZED_NAME_GROSS_VALUE)
  @javax.annotation.Nullable
  private Double grossValue;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "IssueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  @javax.annotation.Nullable
  private LocalDate issueDate;

  public static final String SERIALIZED_NAME_SALE_DATE = "SaleDate";
  @SerializedName(SERIALIZED_NAME_SALE_DATE)
  @javax.annotation.Nullable
  private LocalDate saleDate;

  public SaleDocumentListElement() {
  }

  public SaleDocumentListElement documentNumber(@javax.annotation.Nullable String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Get documentNumber
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(@javax.annotation.Nullable String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public SaleDocumentListElement netValuePLN(@javax.annotation.Nullable Double netValuePLN) {
    this.netValuePLN = netValuePLN;
    return this;
  }

  /**
   * Get netValuePLN
   * @return netValuePLN
   */
  @javax.annotation.Nullable
  public Double getNetValuePLN() {
    return netValuePLN;
  }

  public void setNetValuePLN(@javax.annotation.Nullable Double netValuePLN) {
    this.netValuePLN = netValuePLN;
  }


  public SaleDocumentListElement vatValuePLN(@javax.annotation.Nullable Double vatValuePLN) {
    this.vatValuePLN = vatValuePLN;
    return this;
  }

  /**
   * Get vatValuePLN
   * @return vatValuePLN
   */
  @javax.annotation.Nullable
  public Double getVatValuePLN() {
    return vatValuePLN;
  }

  public void setVatValuePLN(@javax.annotation.Nullable Double vatValuePLN) {
    this.vatValuePLN = vatValuePLN;
  }


  public SaleDocumentListElement netValue(@javax.annotation.Nullable Double netValue) {
    this.netValue = netValue;
    return this;
  }

  /**
   * Get netValue
   * @return netValue
   */
  @javax.annotation.Nullable
  public Double getNetValue() {
    return netValue;
  }

  public void setNetValue(@javax.annotation.Nullable Double netValue) {
    this.netValue = netValue;
  }


  public SaleDocumentListElement grossValue(@javax.annotation.Nullable Double grossValue) {
    this.grossValue = grossValue;
    return this;
  }

  /**
   * Get grossValue
   * @return grossValue
   */
  @javax.annotation.Nullable
  public Double getGrossValue() {
    return grossValue;
  }

  public void setGrossValue(@javax.annotation.Nullable Double grossValue) {
    this.grossValue = grossValue;
  }


  public SaleDocumentListElement issueDate(@javax.annotation.Nullable LocalDate issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * Get issueDate
   * @return issueDate
   */
  @javax.annotation.Nullable
  public LocalDate getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(@javax.annotation.Nullable LocalDate issueDate) {
    this.issueDate = issueDate;
  }


  public SaleDocumentListElement saleDate(@javax.annotation.Nullable LocalDate saleDate) {
    this.saleDate = saleDate;
    return this;
  }

  /**
   * Get saleDate
   * @return saleDate
   */
  @javax.annotation.Nullable
  public LocalDate getSaleDate() {
    return saleDate;
  }

  public void setSaleDate(@javax.annotation.Nullable LocalDate saleDate) {
    this.saleDate = saleDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleDocumentListElement saleDocumentListElement = (SaleDocumentListElement) o;
    return Objects.equals(this.documentNumber, saleDocumentListElement.documentNumber) &&
        Objects.equals(this.netValuePLN, saleDocumentListElement.netValuePLN) &&
        Objects.equals(this.vatValuePLN, saleDocumentListElement.vatValuePLN) &&
        Objects.equals(this.netValue, saleDocumentListElement.netValue) &&
        Objects.equals(this.grossValue, saleDocumentListElement.grossValue) &&
        Objects.equals(this.issueDate, saleDocumentListElement.issueDate) &&
        Objects.equals(this.saleDate, saleDocumentListElement.saleDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentNumber, netValuePLN, vatValuePLN, netValue, grossValue, issueDate, saleDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleDocumentListElement {\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    netValuePLN: ").append(toIndentedString(netValuePLN)).append("\n");
    sb.append("    vatValuePLN: ").append(toIndentedString(vatValuePLN)).append("\n");
    sb.append("    netValue: ").append(toIndentedString(netValue)).append("\n");
    sb.append("    grossValue: ").append(toIndentedString(grossValue)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    saleDate: ").append(toIndentedString(saleDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentNumber");
    openapiFields.add("NetValuePLN");
    openapiFields.add("VatValuePLN");
    openapiFields.add("NetValue");
    openapiFields.add("GrossValue");
    openapiFields.add("IssueDate");
    openapiFields.add("SaleDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleDocumentListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleDocumentListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleDocumentListElement is not found in the empty JSON string", SaleDocumentListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleDocumentListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleDocumentListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DocumentNumber") != null && !jsonObj.get("DocumentNumber").isJsonNull()) && !jsonObj.get("DocumentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleDocumentListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleDocumentListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleDocumentListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleDocumentListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleDocumentListElement>() {
           @Override
           public void write(JsonWriter out, SaleDocumentListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleDocumentListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleDocumentListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleDocumentListElement
   * @throws IOException if the JSON string is invalid with respect to SaleDocumentListElement
   */
  public static SaleDocumentListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleDocumentListElement.class);
  }

  /**
   * Convert an instance of SaleDocumentListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

