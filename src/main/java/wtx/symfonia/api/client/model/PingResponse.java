/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.symfonia.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import wtx.symfonia.api.client.model.ActiveHMFInfo;
import wtx.symfonia.api.client.model.LoadedModuleInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import wtx.symfonia.api.client.invoker.JSON;

/**
 * PingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PingResponse {
  public static final String SERIALIZED_NAME_OPEN_SESSIONS_NUMBER = "OpenSessionsNumber";
  @SerializedName(SERIALIZED_NAME_OPEN_SESSIONS_NUMBER)
  @javax.annotation.Nullable
  private Integer openSessionsNumber;

  public static final String SERIALIZED_NAME_ACTIVE_H_M_F_INFO = "ActiveHMFInfo";
  @SerializedName(SERIALIZED_NAME_ACTIVE_H_M_F_INFO)
  @javax.annotation.Nullable
  private List<ActiveHMFInfo> activeHMFInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOADED_MODULE_INFO = "LoadedModuleInfo";
  @SerializedName(SERIALIZED_NAME_LOADED_MODULE_INFO)
  @javax.annotation.Nullable
  private List<LoadedModuleInfo> loadedModuleInfo = new ArrayList<>();

  public PingResponse() {
  }

  public PingResponse openSessionsNumber(@javax.annotation.Nullable Integer openSessionsNumber) {
    this.openSessionsNumber = openSessionsNumber;
    return this;
  }

  /**
   * Get openSessionsNumber
   * @return openSessionsNumber
   */
  @javax.annotation.Nullable
  public Integer getOpenSessionsNumber() {
    return openSessionsNumber;
  }

  public void setOpenSessionsNumber(@javax.annotation.Nullable Integer openSessionsNumber) {
    this.openSessionsNumber = openSessionsNumber;
  }


  public PingResponse activeHMFInfo(@javax.annotation.Nullable List<ActiveHMFInfo> activeHMFInfo) {
    this.activeHMFInfo = activeHMFInfo;
    return this;
  }

  public PingResponse addActiveHMFInfoItem(ActiveHMFInfo activeHMFInfoItem) {
    if (this.activeHMFInfo == null) {
      this.activeHMFInfo = new ArrayList<>();
    }
    this.activeHMFInfo.add(activeHMFInfoItem);
    return this;
  }

  /**
   * Get activeHMFInfo
   * @return activeHMFInfo
   */
  @javax.annotation.Nullable
  public List<ActiveHMFInfo> getActiveHMFInfo() {
    return activeHMFInfo;
  }

  public void setActiveHMFInfo(@javax.annotation.Nullable List<ActiveHMFInfo> activeHMFInfo) {
    this.activeHMFInfo = activeHMFInfo;
  }


  public PingResponse loadedModuleInfo(@javax.annotation.Nullable List<LoadedModuleInfo> loadedModuleInfo) {
    this.loadedModuleInfo = loadedModuleInfo;
    return this;
  }

  public PingResponse addLoadedModuleInfoItem(LoadedModuleInfo loadedModuleInfoItem) {
    if (this.loadedModuleInfo == null) {
      this.loadedModuleInfo = new ArrayList<>();
    }
    this.loadedModuleInfo.add(loadedModuleInfoItem);
    return this;
  }

  /**
   * Get loadedModuleInfo
   * @return loadedModuleInfo
   */
  @javax.annotation.Nullable
  public List<LoadedModuleInfo> getLoadedModuleInfo() {
    return loadedModuleInfo;
  }

  public void setLoadedModuleInfo(@javax.annotation.Nullable List<LoadedModuleInfo> loadedModuleInfo) {
    this.loadedModuleInfo = loadedModuleInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PingResponse pingResponse = (PingResponse) o;
    return Objects.equals(this.openSessionsNumber, pingResponse.openSessionsNumber) &&
        Objects.equals(this.activeHMFInfo, pingResponse.activeHMFInfo) &&
        Objects.equals(this.loadedModuleInfo, pingResponse.loadedModuleInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openSessionsNumber, activeHMFInfo, loadedModuleInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PingResponse {\n");
    sb.append("    openSessionsNumber: ").append(toIndentedString(openSessionsNumber)).append("\n");
    sb.append("    activeHMFInfo: ").append(toIndentedString(activeHMFInfo)).append("\n");
    sb.append("    loadedModuleInfo: ").append(toIndentedString(loadedModuleInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OpenSessionsNumber");
    openapiFields.add("ActiveHMFInfo");
    openapiFields.add("LoadedModuleInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PingResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PingResponse is not found in the empty JSON string", PingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PingResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("ActiveHMFInfo") != null && !jsonObj.get("ActiveHMFInfo").isJsonNull()) {
        JsonArray jsonArrayactiveHMFInfo = jsonObj.getAsJsonArray("ActiveHMFInfo");
        if (jsonArrayactiveHMFInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ActiveHMFInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ActiveHMFInfo` to be an array in the JSON string but got `%s`", jsonObj.get("ActiveHMFInfo").toString()));
          }

          // validate the optional field `ActiveHMFInfo` (array)
          for (int i = 0; i < jsonArrayactiveHMFInfo.size(); i++) {
            ActiveHMFInfo.validateJsonElement(jsonArrayactiveHMFInfo.get(i));
          };
        }
      }
      if (jsonObj.get("LoadedModuleInfo") != null && !jsonObj.get("LoadedModuleInfo").isJsonNull()) {
        JsonArray jsonArrayloadedModuleInfo = jsonObj.getAsJsonArray("LoadedModuleInfo");
        if (jsonArrayloadedModuleInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LoadedModuleInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LoadedModuleInfo` to be an array in the JSON string but got `%s`", jsonObj.get("LoadedModuleInfo").toString()));
          }

          // validate the optional field `LoadedModuleInfo` (array)
          for (int i = 0; i < jsonArrayloadedModuleInfo.size(); i++) {
            LoadedModuleInfo.validateJsonElement(jsonArrayloadedModuleInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PingResponse>() {
           @Override
           public void write(JsonWriter out, PingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PingResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PingResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PingResponse
   * @throws IOException if the JSON string is invalid with respect to PingResponse
   */
  public static PingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PingResponse.class);
  }

  /**
   * Convert an instance of PingResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

