/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package wtx.symfonia.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import wtx.symfonia.api.client.invoker.JSON;

/**
 * SessionInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class SessionInformation {
  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  @javax.annotation.Nullable
  private String token;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  @javax.annotation.Nullable
  private String deviceName;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "ExpireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime expireTime;

  public static final String SERIALIZED_NAME_REGISTER_TIME = "RegisterTime";
  @SerializedName(SERIALIZED_NAME_REGISTER_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime registerTime;

  public static final String SERIALIZED_NAME_TOTAL_SESSIONS_COUNT = "TotalSessionsCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_SESSIONS_COUNT)
  @javax.annotation.Nullable
  private String totalSessionsCount;

  public SessionInformation() {
  }

  public SessionInformation token(@javax.annotation.Nullable String token) {
    this.token = token;
    return this;
  }

  /**
   * Guid sesji.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(@javax.annotation.Nullable String token) {
    this.token = token;
  }


  public SessionInformation deviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Nazwa urzadzenia.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(@javax.annotation.Nullable String deviceName) {
    this.deviceName = deviceName;
  }


  public SessionInformation expireTime(@javax.annotation.Nullable OffsetDateTime expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Data wygasniecia waznosci sesji.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(@javax.annotation.Nullable OffsetDateTime expireTime) {
    this.expireTime = expireTime;
  }


  public SessionInformation registerTime(@javax.annotation.Nullable OffsetDateTime registerTime) {
    this.registerTime = registerTime;
    return this;
  }

  /**
   * Data rejestracji - otwarcia sesji.
   * @return registerTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisterTime() {
    return registerTime;
  }

  public void setRegisterTime(@javax.annotation.Nullable OffsetDateTime registerTime) {
    this.registerTime = registerTime;
  }


  public SessionInformation totalSessionsCount(@javax.annotation.Nullable String totalSessionsCount) {
    this.totalSessionsCount = totalSessionsCount;
    return this;
  }

  /**
   * Liczba otwarych sesji.
   * @return totalSessionsCount
   */
  @javax.annotation.Nullable
  public String getTotalSessionsCount() {
    return totalSessionsCount;
  }

  public void setTotalSessionsCount(@javax.annotation.Nullable String totalSessionsCount) {
    this.totalSessionsCount = totalSessionsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionInformation sessionInformation = (SessionInformation) o;
    return Objects.equals(this.token, sessionInformation.token) &&
        Objects.equals(this.deviceName, sessionInformation.deviceName) &&
        Objects.equals(this.expireTime, sessionInformation.expireTime) &&
        Objects.equals(this.registerTime, sessionInformation.registerTime) &&
        Objects.equals(this.totalSessionsCount, sessionInformation.totalSessionsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, deviceName, expireTime, registerTime, totalSessionsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionInformation {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    registerTime: ").append(toIndentedString(registerTime)).append("\n");
    sb.append("    totalSessionsCount: ").append(toIndentedString(totalSessionsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("token");
    openapiFields.add("DeviceName");
    openapiFields.add("ExpireTime");
    openapiFields.add("RegisterTime");
    openapiFields.add("TotalSessionsCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionInformation is not found in the empty JSON string", SessionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) && !jsonObj.get("DeviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceName").toString()));
      }
      if ((jsonObj.get("TotalSessionsCount") != null && !jsonObj.get("TotalSessionsCount").isJsonNull()) && !jsonObj.get("TotalSessionsCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalSessionsCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalSessionsCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionInformation>() {
           @Override
           public void write(JsonWriter out, SessionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionInformation
   * @throws IOException if the JSON string is invalid with respect to SessionInformation
   */
  public static SessionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionInformation.class);
  }

  /**
   * Convert an instance of SessionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

