/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.symfonia.api.client;

import pl.wtx.symfonia.api.client.invoker.ApiCallback;
import pl.wtx.symfonia.api.client.invoker.ApiClient;
import pl.wtx.symfonia.api.client.invoker.ApiException;
import pl.wtx.symfonia.api.client.invoker.ApiResponse;
import pl.wtx.symfonia.api.client.invoker.Configuration;
import pl.wtx.symfonia.api.client.invoker.Pair;
import pl.wtx.symfonia.api.client.invoker.ProgressRequestBody;
import pl.wtx.symfonia.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.symfonia.api.client.model.ApiError;
import java.time.LocalDate;
import pl.wtx.symfonia.api.client.model.SaleDocument;
import pl.wtx.symfonia.api.client.model.SaleDocumentListElement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSaleDocument
     * @param id Id dokumentu sprzedazy. (optional)
     * @param number Numer dokumentu sprzedazy. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt dokumentu sprzedazy SaleDocument. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleDocumentCall(@javax.annotation.Nullable Integer id, @javax.annotation.Nullable String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSaleDocumentValidateBeforeCall(@javax.annotation.Nullable Integer id, @javax.annotation.Nullable String number, final ApiCallback _callback) throws ApiException {
        return getSaleDocumentCall(id, number, _callback);

    }

    /**
     * Metoda umozliwia pobranie dokumentu sprzedazy o podanym id lub o podanym numerze dokumentu.
     * 
     * @param id Id dokumentu sprzedazy. (optional)
     * @param number Numer dokumentu sprzedazy. (optional)
     * @return SaleDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt dokumentu sprzedazy SaleDocument. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SaleDocument getSaleDocument(@javax.annotation.Nullable Integer id, @javax.annotation.Nullable String number) throws ApiException {
        ApiResponse<SaleDocument> localVarResp = getSaleDocumentWithHttpInfo(id, number);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie dokumentu sprzedazy o podanym id lub o podanym numerze dokumentu.
     * 
     * @param id Id dokumentu sprzedazy. (optional)
     * @param number Numer dokumentu sprzedazy. (optional)
     * @return ApiResponse&lt;SaleDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt dokumentu sprzedazy SaleDocument. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaleDocument> getSaleDocumentWithHttpInfo(@javax.annotation.Nullable Integer id, @javax.annotation.Nullable String number) throws ApiException {
        okhttp3.Call localVarCall = getSaleDocumentValidateBeforeCall(id, number, null);
        Type localVarReturnType = new TypeToken<SaleDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie dokumentu sprzedazy o podanym id lub o podanym numerze dokumentu. (asynchronously)
     * 
     * @param id Id dokumentu sprzedazy. (optional)
     * @param number Numer dokumentu sprzedazy. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt dokumentu sprzedazy SaleDocument. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSaleDocumentAsync(@javax.annotation.Nullable Integer id, @javax.annotation.Nullable String number, final ApiCallback<SaleDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSaleDocumentValidateBeforeCall(id, number, _callback);
        Type localVarReturnType = new TypeToken<SaleDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesByBuyerAndDateRange
     * @param buyerId Id kontrahenta (nabywcy). (optional)
     * @param dateFrom Data od przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy do wskazanej daty do. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param dateTo Data do przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy od wskazanej daty od. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow SaleDocumentListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesByBuyerAndDateRangeCall(@javax.annotation.Nullable String buyerId, @javax.annotation.Nullable LocalDate dateFrom, @javax.annotation.Nullable LocalDate dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Sales/Filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (buyerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyerId", buyerId));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesByBuyerAndDateRangeValidateBeforeCall(@javax.annotation.Nullable String buyerId, @javax.annotation.Nullable LocalDate dateFrom, @javax.annotation.Nullable LocalDate dateTo, final ApiCallback _callback) throws ApiException {
        return getSalesByBuyerAndDateRangeCall(buyerId, dateFrom, dateTo, _callback);

    }

    /**
     * Metoda umozliwia pobranie wszystkich dokumentow sprzedazy z podanego przedzialu czasowego wystawionych dla kontrahenta (nabywcy) o podanym id.
     * 
     * @param buyerId Id kontrahenta (nabywcy). (optional)
     * @param dateFrom Data od przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy do wskazanej daty do. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param dateTo Data do przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy od wskazanej daty od. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @return List&lt;SaleDocumentListElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow SaleDocumentListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<SaleDocumentListElement> getSalesByBuyerAndDateRange(@javax.annotation.Nullable String buyerId, @javax.annotation.Nullable LocalDate dateFrom, @javax.annotation.Nullable LocalDate dateTo) throws ApiException {
        ApiResponse<List<SaleDocumentListElement>> localVarResp = getSalesByBuyerAndDateRangeWithHttpInfo(buyerId, dateFrom, dateTo);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie wszystkich dokumentow sprzedazy z podanego przedzialu czasowego wystawionych dla kontrahenta (nabywcy) o podanym id.
     * 
     * @param buyerId Id kontrahenta (nabywcy). (optional)
     * @param dateFrom Data od przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy do wskazanej daty do. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param dateTo Data do przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy od wskazanej daty od. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @return ApiResponse&lt;List&lt;SaleDocumentListElement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow SaleDocumentListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SaleDocumentListElement>> getSalesByBuyerAndDateRangeWithHttpInfo(@javax.annotation.Nullable String buyerId, @javax.annotation.Nullable LocalDate dateFrom, @javax.annotation.Nullable LocalDate dateTo) throws ApiException {
        okhttp3.Call localVarCall = getSalesByBuyerAndDateRangeValidateBeforeCall(buyerId, dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<List<SaleDocumentListElement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie wszystkich dokumentow sprzedazy z podanego przedzialu czasowego wystawionych dla kontrahenta (nabywcy) o podanym id. (asynchronously)
     * 
     * @param buyerId Id kontrahenta (nabywcy). (optional)
     * @param dateFrom Data od przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy do wskazanej daty do. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param dateTo Data do przedzialu czasowego. W przypadku, gdy parametr nie zostanie podany wyszukane zostana wszystkie dokumenty sprzedazy od wskazanej daty od. Data paramteru powinna zostac podana w formacie yyyy-MM-dd. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow SaleDocumentListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesByBuyerAndDateRangeAsync(@javax.annotation.Nullable String buyerId, @javax.annotation.Nullable LocalDate dateFrom, @javax.annotation.Nullable LocalDate dateTo, final ApiCallback<List<SaleDocumentListElement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesByBuyerAndDateRangeValidateBeforeCall(buyerId, dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<List<SaleDocumentListElement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
