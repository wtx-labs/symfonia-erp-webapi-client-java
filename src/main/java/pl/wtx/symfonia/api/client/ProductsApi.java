/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.symfonia.api.client;

import pl.wtx.symfonia.api.client.invoker.ApiCallback;
import pl.wtx.symfonia.api.client.invoker.ApiClient;
import pl.wtx.symfonia.api.client.invoker.ApiException;
import pl.wtx.symfonia.api.client.invoker.ApiResponse;
import pl.wtx.symfonia.api.client.invoker.Configuration;
import pl.wtx.symfonia.api.client.invoker.Pair;
import pl.wtx.symfonia.api.client.invoker.ProgressRequestBody;
import pl.wtx.symfonia.api.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import pl.wtx.symfonia.api.client.model.ApiError;
import pl.wtx.symfonia.api.client.model.Dimension;
import pl.wtx.symfonia.api.client.model.ProductCriteriaFilter;
import pl.wtx.symfonia.api.client.model.ProductListElement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProductDimensions
     * @param productId Identyfikator towaru. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow Dimension. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductDimensionsCall(String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ProductDimensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productId", productId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductDimensionsValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
        return getProductDimensionsCall(productId, _callback);

    }

    /**
     * Metoda umozliwia pobranie listy wymiarow towaru o podanym id. Dane zwracane sa w ustandaryzowanym formacie - w przeciwienswie do wersji 1, gdzie dane sa zwracane w formacie zaleznym od konfiguracji serwera SQL.
     * 
     * @param productId Identyfikator towaru. (optional)
     * @return List&lt;Dimension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow Dimension. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Dimension> getProductDimensions(String productId) throws ApiException {
        ApiResponse<List<Dimension>> localVarResp = getProductDimensionsWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie listy wymiarow towaru o podanym id. Dane zwracane sa w ustandaryzowanym formacie - w przeciwienswie do wersji 1, gdzie dane sa zwracane w formacie zaleznym od konfiguracji serwera SQL.
     * 
     * @param productId Identyfikator towaru. (optional)
     * @return ApiResponse&lt;List&lt;Dimension&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow Dimension. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dimension>> getProductDimensionsWithHttpInfo(String productId) throws ApiException {
        okhttp3.Call localVarCall = getProductDimensionsValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<List<Dimension>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie listy wymiarow towaru o podanym id. Dane zwracane sa w ustandaryzowanym formacie - w przeciwienswie do wersji 1, gdzie dane sa zwracane w formacie zaleznym od konfiguracji serwera SQL. (asynchronously)
     * 
     * @param productId Identyfikator towaru. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow Dimension. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductDimensionsAsync(String productId, final ApiCallback<List<Dimension>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductDimensionsValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<List<Dimension>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     * @param id Identyfikator towaru. (optional)
     * @param barcode Identyfikator barcode towaru. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCall(String id, String barcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (barcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("barcode", barcode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(String id, String barcode, final ApiCallback _callback) throws ApiException {
        return getProductsCall(id, barcode, _callback);

    }

    /**
     * Metoda umozliwia pobranie listy wszystkich towarow. Mozliwe jest pobieranie szczegolowych informacji o produkcie na podstawie wskazanego identyfikatora poprzez wykorzystanie jednego z opcjonalnych parametrow zapytania.
     * 
     * @param id Identyfikator towaru. (optional)
     * @param barcode Identyfikator barcode towaru. (optional)
     * @return List&lt;ProductListElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductListElement> getProducts(String id, String barcode) throws ApiException {
        ApiResponse<List<ProductListElement>> localVarResp = getProductsWithHttpInfo(id, barcode);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie listy wszystkich towarow. Mozliwe jest pobieranie szczegolowych informacji o produkcie na podstawie wskazanego identyfikatora poprzez wykorzystanie jednego z opcjonalnych parametrow zapytania.
     * 
     * @param id Identyfikator towaru. (optional)
     * @param barcode Identyfikator barcode towaru. (optional)
     * @return ApiResponse&lt;List&lt;ProductListElement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductListElement>> getProductsWithHttpInfo(String id, String barcode) throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(id, barcode, null);
        Type localVarReturnType = new TypeToken<List<ProductListElement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie listy wszystkich towarow. Mozliwe jest pobieranie szczegolowych informacji o produkcie na podstawie wskazanego identyfikatora poprzez wykorzystanie jednego z opcjonalnych parametrow zapytania. (asynchronously)
     * 
     * @param id Identyfikator towaru. (optional)
     * @param barcode Identyfikator barcode towaru. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAsync(String id, String barcode, final ApiCallback<List<ProductListElement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(id, barcode, _callback);
        Type localVarReturnType = new TypeToken<List<ProductListElement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsByFilterSql
     * @param productCriteriaFilter  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByFilterSqlCall(ProductCriteriaFilter productCriteriaFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCriteriaFilter;

        // create path and map variables
        String localVarPath = "/Products/FilterSql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsByFilterSqlValidateBeforeCall(ProductCriteriaFilter productCriteriaFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productCriteriaFilter' is set
        if (productCriteriaFilter == null) {
            throw new ApiException("Missing the required parameter 'productCriteriaFilter' when calling getProductsByFilterSql(Async)");
        }

        return getProductsByFilterSqlCall(productCriteriaFilter, _callback);

    }

    /**
     * Metoda umozliwia pobranie listy towarow spelniajacych podane kryteria wyszukiwania przy uzyciu w skladni SQL.
     * 
     * @param productCriteriaFilter  (required)
     * @return List&lt;ProductListElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductListElement> getProductsByFilterSql(ProductCriteriaFilter productCriteriaFilter) throws ApiException {
        ApiResponse<List<ProductListElement>> localVarResp = getProductsByFilterSqlWithHttpInfo(productCriteriaFilter);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie listy towarow spelniajacych podane kryteria wyszukiwania przy uzyciu w skladni SQL.
     * 
     * @param productCriteriaFilter  (required)
     * @return ApiResponse&lt;List&lt;ProductListElement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductListElement>> getProductsByFilterSqlWithHttpInfo(ProductCriteriaFilter productCriteriaFilter) throws ApiException {
        okhttp3.Call localVarCall = getProductsByFilterSqlValidateBeforeCall(productCriteriaFilter, null);
        Type localVarReturnType = new TypeToken<List<ProductListElement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie listy towarow spelniajacych podane kryteria wyszukiwania przy uzyciu w skladni SQL. (asynchronously)
     * 
     * @param productCriteriaFilter  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca kolekcje obiektow ProductListElement. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByFilterSqlAsync(ProductCriteriaFilter productCriteriaFilter, final ApiCallback<List<ProductListElement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsByFilterSqlValidateBeforeCall(productCriteriaFilter, _callback);
        Type localVarReturnType = new TypeToken<List<ProductListElement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
