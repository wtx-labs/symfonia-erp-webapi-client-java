/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.symfonia.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.symfonia.api.client.invoker.JSON;

/**
 * ActiveHMFInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.13.0")
public class ActiveHMFInfo {
  public static final String SERIALIZED_NAME_SEED = "Seed";
  @SerializedName(SERIALIZED_NAME_SEED)
  @javax.annotation.Nullable
  private String seed;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  @javax.annotation.Nullable
  private String serverName;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  @javax.annotation.Nullable
  private String databaseName;

  public static final String SERIALIZED_NAME_FIRM = "Firm";
  @SerializedName(SERIALIZED_NAME_FIRM)
  @javax.annotation.Nullable
  private String firm;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public ActiveHMFInfo() {
  }

  public ActiveHMFInfo seed(@javax.annotation.Nullable String seed) {
    this.seed = seed;
    return this;
  }

  /**
   * Get seed
   * @return seed
   */
  @javax.annotation.Nullable
  public String getSeed() {
    return seed;
  }

  public void setSeed(@javax.annotation.Nullable String seed) {
    this.seed = seed;
  }


  public ActiveHMFInfo serverName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(@javax.annotation.Nullable String serverName) {
    this.serverName = serverName;
  }


  public ActiveHMFInfo databaseName(@javax.annotation.Nullable String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(@javax.annotation.Nullable String databaseName) {
    this.databaseName = databaseName;
  }


  public ActiveHMFInfo firm(@javax.annotation.Nullable String firm) {
    this.firm = firm;
    return this;
  }

  /**
   * Get firm
   * @return firm
   */
  @javax.annotation.Nullable
  public String getFirm() {
    return firm;
  }

  public void setFirm(@javax.annotation.Nullable String firm) {
    this.firm = firm;
  }


  public ActiveHMFInfo user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveHMFInfo activeHMFInfo = (ActiveHMFInfo) o;
    return Objects.equals(this.seed, activeHMFInfo.seed) &&
        Objects.equals(this.serverName, activeHMFInfo.serverName) &&
        Objects.equals(this.databaseName, activeHMFInfo.databaseName) &&
        Objects.equals(this.firm, activeHMFInfo.firm) &&
        Objects.equals(this.user, activeHMFInfo.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seed, serverName, databaseName, firm, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveHMFInfo {\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    firm: ").append(toIndentedString(firm)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Seed");
    openapiFields.add("ServerName");
    openapiFields.add("DatabaseName");
    openapiFields.add("Firm");
    openapiFields.add("User");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveHMFInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveHMFInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveHMFInfo is not found in the empty JSON string", ActiveHMFInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveHMFInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveHMFInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Seed") != null && !jsonObj.get("Seed").isJsonNull()) && !jsonObj.get("Seed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seed").toString()));
      }
      if ((jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) && !jsonObj.get("ServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerName").toString()));
      }
      if ((jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) && !jsonObj.get("DatabaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatabaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatabaseName").toString()));
      }
      if ((jsonObj.get("Firm") != null && !jsonObj.get("Firm").isJsonNull()) && !jsonObj.get("Firm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Firm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Firm").toString()));
      }
      if ((jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) && !jsonObj.get("User").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `User` to be a primitive type in the JSON string but got `%s`", jsonObj.get("User").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveHMFInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveHMFInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveHMFInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveHMFInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveHMFInfo>() {
           @Override
           public void write(JsonWriter out, ActiveHMFInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveHMFInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveHMFInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveHMFInfo
   * @throws IOException if the JSON string is invalid with respect to ActiveHMFInfo
   */
  public static ActiveHMFInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveHMFInfo.class);
  }

  /**
   * Convert an instance of ActiveHMFInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

