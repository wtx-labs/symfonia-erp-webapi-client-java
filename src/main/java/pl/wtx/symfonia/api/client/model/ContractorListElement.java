/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.symfonia.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import pl.wtx.symfonia.api.client.invoker.JSON;

/**
 * ContractorListElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.15.0")
public class ContractorListElement {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Integer id;

  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  @javax.annotation.Nullable
  private Boolean active;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_N_I_P = "NIP";
  @SerializedName(SERIALIZED_NAME_N_I_P)
  @javax.annotation.Nullable
  private String NIP;

  public static final String SERIALIZED_NAME_PAYMENT_FORM_OID = "PaymentFormOid";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FORM_OID)
  @javax.annotation.Nullable
  private Integer paymentFormOid;

  public static final String SERIALIZED_NAME_PAYMENT_REGISTRY_OID = "PaymentRegistryOid";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REGISTRY_OID)
  @javax.annotation.Nullable
  private Integer paymentRegistryOid;

  public static final String SERIALIZED_NAME_PESEL = "Pesel";
  @SerializedName(SERIALIZED_NAME_PESEL)
  @javax.annotation.Nullable
  private String pesel;

  public static final String SERIALIZED_NAME_PLACE = "Place";
  @SerializedName(SERIALIZED_NAME_PLACE)
  @javax.annotation.Nullable
  private String place;

  public static final String SERIALIZED_NAME_POST_CODE = "PostCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  @javax.annotation.Nullable
  private String postCode;

  public ContractorListElement() {
  }

  public ContractorListElement id(@javax.annotation.Nullable Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id kontrahenta.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Integer id) {
    this.id = id;
  }


  public ContractorListElement active(@javax.annotation.Nullable Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Status aktywnosci.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(@javax.annotation.Nullable Boolean active) {
    this.active = active;
  }


  public ContractorListElement code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Kod kontrahenta.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public ContractorListElement name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Nazwa kontrahenta.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ContractorListElement NIP(@javax.annotation.Nullable String NIP) {
    this.NIP = NIP;
    return this;
  }

  /**
   * Numer NIP kontrahenta.
   * @return NIP
   */
  @javax.annotation.Nullable
  public String getNIP() {
    return NIP;
  }

  public void setNIP(@javax.annotation.Nullable String NIP) {
    this.NIP = NIP;
  }


  public ContractorListElement paymentFormOid(@javax.annotation.Nullable Integer paymentFormOid) {
    this.paymentFormOid = paymentFormOid;
    return this;
  }

  /**
   * Id domyslnej formy platnosci kontrahenta.
   * @return paymentFormOid
   */
  @javax.annotation.Nullable
  public Integer getPaymentFormOid() {
    return paymentFormOid;
  }

  public void setPaymentFormOid(@javax.annotation.Nullable Integer paymentFormOid) {
    this.paymentFormOid = paymentFormOid;
  }


  public ContractorListElement paymentRegistryOid(@javax.annotation.Nullable Integer paymentRegistryOid) {
    this.paymentRegistryOid = paymentRegistryOid;
    return this;
  }

  /**
   * Id domyslnego rejestru platnosci kontrahenta.
   * @return paymentRegistryOid
   */
  @javax.annotation.Nullable
  public Integer getPaymentRegistryOid() {
    return paymentRegistryOid;
  }

  public void setPaymentRegistryOid(@javax.annotation.Nullable Integer paymentRegistryOid) {
    this.paymentRegistryOid = paymentRegistryOid;
  }


  public ContractorListElement pesel(@javax.annotation.Nullable String pesel) {
    this.pesel = pesel;
    return this;
  }

  /**
   * Pesel kontrahenta.
   * @return pesel
   */
  @javax.annotation.Nullable
  public String getPesel() {
    return pesel;
  }

  public void setPesel(@javax.annotation.Nullable String pesel) {
    this.pesel = pesel;
  }


  public ContractorListElement place(@javax.annotation.Nullable String place) {
    this.place = place;
    return this;
  }

  /**
   * Miasto z domyslnego adresu kontrahenta.
   * @return place
   */
  @javax.annotation.Nullable
  public String getPlace() {
    return place;
  }

  public void setPlace(@javax.annotation.Nullable String place) {
    this.place = place;
  }


  public ContractorListElement postCode(@javax.annotation.Nullable String postCode) {
    this.postCode = postCode;
    return this;
  }

  /**
   * Kod pocztowy z domyslnego adresu kontrahenta.
   * @return postCode
   */
  @javax.annotation.Nullable
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(@javax.annotation.Nullable String postCode) {
    this.postCode = postCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractorListElement contractorListElement = (ContractorListElement) o;
    return Objects.equals(this.id, contractorListElement.id) &&
        Objects.equals(this.active, contractorListElement.active) &&
        Objects.equals(this.code, contractorListElement.code) &&
        Objects.equals(this.name, contractorListElement.name) &&
        Objects.equals(this.NIP, contractorListElement.NIP) &&
        Objects.equals(this.paymentFormOid, contractorListElement.paymentFormOid) &&
        Objects.equals(this.paymentRegistryOid, contractorListElement.paymentRegistryOid) &&
        Objects.equals(this.pesel, contractorListElement.pesel) &&
        Objects.equals(this.place, contractorListElement.place) &&
        Objects.equals(this.postCode, contractorListElement.postCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, active, code, name, NIP, paymentFormOid, paymentRegistryOid, pesel, place, postCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractorListElement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    NIP: ").append(toIndentedString(NIP)).append("\n");
    sb.append("    paymentFormOid: ").append(toIndentedString(paymentFormOid)).append("\n");
    sb.append("    paymentRegistryOid: ").append(toIndentedString(paymentRegistryOid)).append("\n");
    sb.append("    pesel: ").append(toIndentedString(pesel)).append("\n");
    sb.append("    place: ").append(toIndentedString(place)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Id", "Active", "Code", "Name", "NIP", "PaymentFormOid", "PaymentRegistryOid", "Pesel", "Place", "PostCode"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContractorListElement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContractorListElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractorListElement is not found in the empty JSON string", ContractorListElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContractorListElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContractorListElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NIP") != null && !jsonObj.get("NIP").isJsonNull()) && !jsonObj.get("NIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NIP").toString()));
      }
      if ((jsonObj.get("Pesel") != null && !jsonObj.get("Pesel").isJsonNull()) && !jsonObj.get("Pesel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pesel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Pesel").toString()));
      }
      if ((jsonObj.get("Place") != null && !jsonObj.get("Place").isJsonNull()) && !jsonObj.get("Place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Place").toString()));
      }
      if ((jsonObj.get("PostCode") != null && !jsonObj.get("PostCode").isJsonNull()) && !jsonObj.get("PostCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PostCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PostCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractorListElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractorListElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractorListElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractorListElement.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractorListElement>() {
           @Override
           public void write(JsonWriter out, ContractorListElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractorListElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContractorListElement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContractorListElement
   * @throws IOException if the JSON string is invalid with respect to ContractorListElement
   */
  public static ContractorListElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractorListElement.class);
  }

  /**
   * Convert an instance of ContractorListElement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

