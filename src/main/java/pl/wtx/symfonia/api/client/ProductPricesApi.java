/*
 * Symfonia WebAPI
 * Symfonia WebAPI - specyfikacja wybranych endpointow API systemu ERP Symfonia. Modele danych sa uproszczone i ograniczone do niektorych parametrow (wersja rozwojowa).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package pl.wtx.symfonia.api.client;

import com.google.gson.reflect.TypeToken;

import pl.wtx.symfonia.api.client.invoker.ApiCallback;
import pl.wtx.symfonia.api.client.invoker.ApiClient;
import pl.wtx.symfonia.api.client.invoker.ApiException;
import pl.wtx.symfonia.api.client.invoker.ApiResponse;
import pl.wtx.symfonia.api.client.invoker.Configuration;
import pl.wtx.symfonia.api.client.invoker.Pair;
import pl.wtx.symfonia.api.client.invoker.ProgressRequestBody;
import pl.wtx.symfonia.api.client.invoker.ProgressResponseBody;
import pl.wtx.symfonia.api.client.model.ApiError;
import pl.wtx.symfonia.api.client.model.PriceOrderCriteria;
import pl.wtx.symfonia.api.client.model.PriceOrderResult;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductPricesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductPricesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductPricesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrderPrices
     * @param priceOrderCriteria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt PriceOrderResult </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderPricesCall(PriceOrderCriteria priceOrderCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = priceOrderCriteria;

        // create path and map variables
        String localVarPath = "/ProductPrices/OrderPrices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderPricesValidateBeforeCall(PriceOrderCriteria priceOrderCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'priceOrderCriteria' is set
        if (priceOrderCriteria == null) {
            throw new ApiException("Missing the required parameter 'priceOrderCriteria' when calling getOrderPrices(Async)");
        }

        return getOrderPricesCall(priceOrderCriteria, _callback);

    }

    /**
     * Metoda umozliwia pobranie listy cen dla zadanych kryteriow wyliczonych za pomoca pozycji zamowienia obcego.
     * 
     * @param priceOrderCriteria  (required)
     * @return PriceOrderResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt PriceOrderResult </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PriceOrderResult getOrderPrices(PriceOrderCriteria priceOrderCriteria) throws ApiException {
        ApiResponse<PriceOrderResult> localVarResp = getOrderPricesWithHttpInfo(priceOrderCriteria);
        return localVarResp.getData();
    }

    /**
     * Metoda umozliwia pobranie listy cen dla zadanych kryteriow wyliczonych za pomoca pozycji zamowienia obcego.
     * 
     * @param priceOrderCriteria  (required)
     * @return ApiResponse&lt;PriceOrderResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt PriceOrderResult </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PriceOrderResult> getOrderPricesWithHttpInfo(PriceOrderCriteria priceOrderCriteria) throws ApiException {
        okhttp3.Call localVarCall = getOrderPricesValidateBeforeCall(priceOrderCriteria, null);
        Type localVarReturnType = new TypeToken<PriceOrderResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Metoda umozliwia pobranie listy cen dla zadanych kryteriow wyliczonych za pomoca pozycji zamowienia obcego. (asynchronously)
     * 
     * @param priceOrderCriteria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Zwraca obiekt PriceOrderResult </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderPricesAsync(PriceOrderCriteria priceOrderCriteria, final ApiCallback<PriceOrderResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderPricesValidateBeforeCall(priceOrderCriteria, _callback);
        Type localVarReturnType = new TypeToken<PriceOrderResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
